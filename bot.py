# bot.py ‚Äî Flask + Webhook (python-telegram-bot==20.3)
import os
import re
import math
import asyncio
import threading
from typing import List, Tuple, Optional

import pandas as pd
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# === –¢–æ–∫–µ–Ω ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# === –ê–ª–∏–∞—Å—ã ===
try:
    from aliases import ALIASES
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å aliases.py: {e}")
    ALIASES = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def normalize_text(s: str) -> str:
    s = (s or "").strip().lower()
    s = s.replace("—ë", "–µ")
    s = re.sub(r'[\"‚Äú‚Äù‚Äû‚Äô\']', " ", s)
    s = re.sub(r"\s+", " ", s)
    return s

def resolve_alias(user_text: str) -> str:
    t = normalize_text(user_text)
    mapped = ALIASES.get(t, t)
    return normalize_text(mapped).replace("_", " ").strip()

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ Excel ----------
COL_SYNONYMS = {
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",

    "–ø–æ—Å—É–¥–∞": "–ø–æ—Å—É–¥–∞",
    "glass": "–ø–æ—Å—É–¥–∞",

    "–º–µ—Ç–æ–¥": "–º–µ—Ç–æ–¥",
    "method": "–º–µ—Ç–æ–¥",
    "–º–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è": "–º–µ—Ç–æ–¥",
    "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ",

    "–≥–∞—Ä–Ω–∏—à": "–≥–∞—Ä–Ω–∏—à",
    "garnish": "–≥–∞—Ä–Ω–∏—à",

    "—Å–æ—Å—Ç–∞–≤": "—Å–æ—Å—Ç–∞–≤",
    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": "—Å–æ—Å—Ç–∞–≤",

    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
    "–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",  # –æ–ø–µ—á–∞—Ç–∫–∞

    "–≥—Ä–∞–º–º–æ–≤–∫–∞": "–≥—Ä–∞–º–º–æ–≤–∫–∞",
    "amount": "–≥—Ä–∞–º–º–æ–≤–∫–∞",

    "–≤—ã—Ö–æ–¥": "–≤—ã—Ö–æ–¥",
    "yield": "–≤—ã—Ö–æ–¥",
}

def canon_columns(df: pd.DataFrame) -> pd.DataFrame:
    ren = {}
    for c in df.columns:
        key = normalize_text(str(c))
        ren[c] = COL_SYNONYMS.get(key, key)
    return df.rename(columns=ren)

def load_table(path: str, kind: str) -> pd.DataFrame:
    df = pd.read_excel(path)
    df = canon_columns(df).ffill()

    # –ï—Å–ª–∏ –Ω–µ—Ç "–Ω–∞–∑–≤–∞–Ω–∏–µ" ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –∫–∞–∫ –∏–º—è
    if "–Ω–∞–∑–≤–∞–Ω–∏–µ" not in df.columns and len(df.columns) > 0:
        df.insert(0, "–Ω–∞–∑–≤–∞–Ω–∏–µ", df.iloc[:, 0])

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º, —á–∏—Å—Ç–∏–º
    if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in df.columns:
        df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] = df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].astype(str).apply(normalize_text)
        df = df[~df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].isin(["", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "name", "title", "none", "nan"])]

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
    for col in df.columns:
        if df[col].dtype == object and col != "–≥—Ä–∞–º–º–æ–≤–∫–∞":
            df[col] = df[col].astype(str).apply(normalize_text)
        if col == "–≥—Ä–∞–º–º–æ–≤–∫–∞":
            df[col] = df[col].astype(str).str.strip()

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {kind}: {df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique() if '–Ω–∞–∑–≤–∞–Ω–∏–µ' in df.columns else 0}")
    return df

# ---------- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ----------
cocktails_df = load_table(COCKTAILS_FILE, "–∫–æ–∫—Ç–µ–π–ª–µ–π")
zagi_df      = load_table(ZAGOTOVKI_FILE, "–∑–∞–≥–æ—Ç–æ–≤–æ–∫")
tinct_df     = load_table(TINCTURES_FILE, "–Ω–∞—Å—Ç–æ–µ–∫")

cocktail_names = sorted(cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in cocktails_df.columns else []
zagi_names     = sorted(zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in zagi_df.columns else []
tinct_names    = sorted(tinct_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in tinct_df.columns else []

cocktail_names_set = set(cocktail_names)
zagi_names_set     = set(zagi_names)
tinct_names_set    = set(tinct_names)

print("üìå –ö–æ–ª–æ–Ω–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π:", cocktails_df.columns.tolist())
print("üìå –ö–æ–ª–æ–Ω–∫–∏ –∑–∞–≥–æ—Ç–æ–≤–æ–∫:", zagi_df.columns.tolist())
print("üìå –ö–æ–ª–æ–Ω–∫–∏ –Ω–∞—Å—Ç–æ–µ–∫:", tinct_df.columns.tolist())

# ---------- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã ----------
def title_cap(s: str) -> str:
    return " ".join(w.capitalize() for w in (s or "").split())

def format_cocktail(name: str) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∫–æ–∫—Ç–µ–π–ª—å."
    lines = [f"üç∏ *{title_cap(name)}*", ""]
    if "–ø–æ—Å—É–¥–∞" in g.columns and pd.notna(g["–ø–æ—Å—É–¥–∞"].iloc[0]):   lines.append(f"ü•É –ü–æ—Å—É–¥–∞: {g['–ø–æ—Å—É–¥–∞'].iloc[0]}")
    if "–º–µ—Ç–æ–¥" in g.columns and pd.notna(g["–º–µ—Ç–æ–¥"].iloc[0]):     lines.append(f"üõ† –ú–µ—Ç–æ–¥: {g['–º–µ—Ç–æ–¥'].iloc[0]}")
    if "–≥–∞—Ä–Ω–∏—à" in g.columns and pd.notna(g["–≥–∞—Ä–Ω–∏—à"].iloc[0]):   lines.append(f"üåø –ì–∞—Ä–Ω–∏—à: {g['–≥–∞—Ä–Ω–∏—à'].iloc[0]}")
    lines.append("")
    if "—Å–æ—Å—Ç–∞–≤" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing, amt = str(r["—Å–æ—Å—Ç–∞–≤"]).strip(), str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
            if ing and ing not in ["", "—Å–æ—Å—Ç–∞–≤"] and amt:
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    else:
        lines.append("_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö_")
    return "\n".join(lines)

def format_zagotovka(name: str) -> str:
    g = zagi_df[zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∑–∞–≥–æ—Ç–æ–≤–∫—É."
    lines = [f"üß™ *{title_cap(name)}*", ""]
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing, amt = str(r["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).strip(), str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
            if ing and ing not in ["", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"] and amt:
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    if "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" in g.columns and pd.notna(g["–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"].iloc[0]):
        lines.append("")
        lines.append(f"üßØ –ú–µ—Ç–æ–¥: {g['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ'].iloc[0]}")
    if "–≤—ã—Ö–æ–¥" in g.columns and pd.notna(g["–≤—ã—Ö–æ–¥"].iloc[0]):
        lines.append(f"üì¶ –í—ã—Ö–æ–¥: {g['–≤—ã—Ö–æ–¥'].iloc[0]}")
    return "\n".join(lines)

def format_tincture(name: str) -> str:
    g = tinct_df[tinct_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –Ω–∞—Å—Ç–æ–π–∫—É."
    lines = [f"üß™ *{title_cap(name)}*", ""]
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing, amt = str(r["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]).strip(), str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
            if ing and ing not in ["", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"] and amt:
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    if "–º–µ—Ç–æ–¥" in g.columns and pd.notna(g["–º–µ—Ç–æ–¥"].iloc[0]):
        lines.append("")
        lines.append(f"üßØ –ú–µ—Ç–æ–¥: {g['–º–µ—Ç–æ–¥'].iloc[0]}")
    return "\n".join(lines)

# ---------- –ü—Ä–µ–º–∏–∫—Å—ã ----------
EXCLUDE_TOKENS = [
    "juice", "—Å–æ–∫", "sparkling", "–∏–≥—Ä–∏—Å—Ç", "soda", "—Å–æ–¥–∞", "cola", "–∫–æ–ª–∞", "coke", "sprite",
    "tonic", "—Ç–æ–Ω–∏–∫", "cream", "—Å–ª–∏–≤–∫", "milk", "–º–æ–ª–æ–∫–æ", "puree", "–ø—é—Ä–µ",
    "top", "–¥—ç—à", "dash", "barspoon", "–±—Å", "—â–µ–ø–æ—Ç–∫–∞", "pinch", "pt",
]
ALLOW_CREAM_LIQUEUR = ["baileys", "irish cream", "—Å–ª–∏–≤–æ—á–Ω –ª–∏–∫–µ—Ä", "—Å–ª–∏–≤–æ—á–Ω –ª–∏–∫—ë—Ä", "liqueur", "–ª–∏–∫–µ—Ä", "–ª–∏–∫—ë—Ä"]

def is_cream_liqueur(ing: str) -> bool:
    s = normalize_text(ing)
    if "baileys" in s or "irish cream" in s:
        return True
    if "—Å–ª–∏–≤–æ—á–Ω" in s and any(x in s for x in ["–ª–∏–∫–µ—Ä", "–ª–∏–∫—ë—Ä", "liqueur"]):
        return True
    return False

def parse_ml(s: str) -> Optional[float]:
    if s is None:
        return None
    t = str(s).strip().lower()
    if any(x in t for x in ["top", "–¥—ç—à", "dash", "barspoon", "pt", "—â–µ–ø–æ—Ç–∫–∞", "pinch"]):
        return None
    m = re.search(r"(\d+([.,]\d+)?)\s*(ml|–º–ª)?\b", t)
    if not m:
        return None
    val = float(m.group(1).replace(",", "."))
    if re.search(r"\b(g|–≥—Ä|–≥—Ä–∞–º–º|oz|—É–Ω—Ü)\b", t):
        return None
    return val

def make_premix(name: str, volume: int) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty or "—Å–æ—Å—Ç–∞–≤" not in g.columns or "–≥—Ä–∞–º–º–æ–≤–∫–∞" not in g.columns:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏–∫—Å."
    usable: List[Tuple[str, float]] = []
    for _, r in g.iterrows():
        ing = str(r["—Å–æ—Å—Ç–∞–≤"]).strip()
        amt = str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
        if not ing or ing in ["", "—Å–æ—Å—Ç–∞–≤"]:
            continue
        if not is_cream_liqueur(ing) and any(tok in normalize_text(ing) for tok in EXCLUDE_TOKENS):
            continue
        ml = parse_ml(amt)
        if ml is None or ml <= 0:
            continue
        usable.append((ing, ml))
    if not usable:
        return f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {title_cap(name)}* ({volume} –º–ª)\n\n_–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏–∫—Å–∞_"
    total = sum(x[1] for x in usable)
    lines = [f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {title_cap(name)}* ({volume} –º–ª)", ""]
    for ing, ml in usable:
        scaled = (ml / total) * volume
        scaled = math.floor(scaled / 10.0) * 10
        if scaled > 0:
            lines.append(f"‚Äî {ing} ‚Äî {int(scaled)} –º–ª")
    return "\n".join(lines)

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ / –ü–∞–≥–∏–Ω–∞—Ü–∏—è ----------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üç∏ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="list|cocktails|0")],
        [InlineKeyboardButton("üß™ –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data="list|zagi|0")],
        [InlineKeyboardButton("üß™ –ù–∞—Å—Ç–æ–π–∫–∏", callback_data="list|tinct|0")],
    ])

def paged_names(kind: str, page: int, page_size: int = 20) -> Tuple[List[str], int]:
    names = {
        "cocktails": cocktail_names,
        "zagi":      zagi_names,
        "tinct":     tinct_names,
    }.get(kind, [])
    total_pages = max(1, math.ceil(len(names) / page_size))
    page = max(0, min(page, total_pages - 1))
    start = page * page_size
    return names[start:start + page_size], total_pages

def make_list_kb(kind: str, page: int) -> InlineKeyboardMarkup:
    items, total_pages = paged_names(kind, page)
    rows = [[InlineKeyboardButton(title_cap(n), callback_data=f"show|{kind}|{n}")] for n in items]
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list|{kind}|{page-1}"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"list|{kind}|{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(rows)

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Rambling-–±–æ—Ç.\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu_kb()
    )

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_raw = update.message.text or ""
    q = resolve_alias(q_raw)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã—Å—Ç—Ä—ã–º —Å–ª–æ–≤–æ–º
    if q in ["–∫–æ–∫—Ç–µ–π–ª–∏", "–∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–ª–∏"]:
        await update.message.reply_text("üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:", reply_markup=make_list_kb("cocktails", 0))
        return
    if q in ["–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "–∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–∑–∞–≥"]:
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:", reply_markup=make_list_kb("zagi", 0))
        return
    if q in ["–Ω–∞—Å—Ç–æ–π–∫–∏", "–Ω–∞—Å—Ç–æ–π–∫–∞", "–Ω–∞—Å—Ç"]:
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:", reply_markup=make_list_kb("tinct", 0))
        return

    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if q in cocktail_names_set:
        text = format_cocktail(q)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{q}|500"),
            InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{q}|700"),
            InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{q}|1000"),
        ]])
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        return
    if q in zagi_names_set:
        await update.message.reply_text(format_zagotovka(q), parse_mode="Markdown")
        return
    if q in tinct_names_set:
        await update.message.reply_text(format_tincture(q), parse_mode="Markdown")
        return

    # –ú—è–≥–∫–∏–π –ø–æ–∏—Å–∫
    q_nothe = q.replace(" the ", " ").strip()
    candidates = [n for n in cocktail_names if q_nothe in n or n in q_nothe]
    if candidates:
        best = sorted(candidates, key=len)[0]
        text = format_cocktail(best)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{best}|500"),
            InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{best}|700"),
            InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{best}|1000"),
        ]])
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        return
    candidates = [n for n in zagi_names if q_nothe in n or n in q_nothe]
    if candidates:
        await update.message.reply_text(format_zagotovka(candidates[0]), parse_mode="Markdown")
        return
    candidates = [n for n in tinct_names if q_nothe in n or n in q_nothe]
    if candidates:
        await update.message.reply_text(format_tincture(candidates[0]), parse_mode="Markdown")
        return

    await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é /start")

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = (query.data or "").split("|")

    if data[0] == "list":
        kind, page = data[1], int(data[2])
        title = {"cocktails": "üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:",
                 "zagi":      "üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:",
                 "tinct":     "üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:"}.get(kind, "–í—ã–±–µ—Ä–∏:")
        await query.message.reply_text(title, reply_markup=make_list_kb(kind, page))
        return

    if data[0] == "show":
        kind, name = data[1], data[2]
        if kind == "cocktails":
            text = format_cocktail(name)
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{name}|500"),
                InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{name}|700"),
                InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{name}|1000"),
            ]])
            await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        elif kind == "zagi":
            await query.message.reply_text(format_zagotovka(name), parse_mode="Markdown")
        elif kind == "tinct":
            await query.message.reply_text(format_tincture(name), parse_mode="Markdown")
        return

    if data[0] == "premix":
        name, vol = data[1], int(data[2])
        await query.message.reply_text(make_premix(name, vol), parse_mode="Markdown")
        return

# ---------- Application (PTB) ----------
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
application.add_handler(CallbackQueryHandler(on_callback))

# –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤ —Ñ–æ–Ω–µ (–Ω—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ update_queue)
async def _runner():
    await application.initialize()
    await application.start()
    print(f"‚úÖ –ö–æ–∫—Ç–µ–π–ª–∏:  {len(cocktail_names)}")
    print(f"‚úÖ –ó–∞–≥–æ—Ç–æ–≤–∫–∏: {len(zagi_names)}")
    print(f"‚úÖ –ù–∞—Å—Ç–æ–π–∫–∏:  {len(tinct_names)}")
    # –¥–µ—Ä–∂–∏–º –∂–∏–≤—ã–º
    await asyncio.Event().wait()

def _start_async_runner():
    asyncio.run(_runner())

threading.Thread(target=_start_async_runner, daemon=True).start()

# ---------- Flask ----------
app = Flask(__name__)

@app.get("/")
def index():
    return "OK", 200

@app.get("/health")
def health():
    return jsonify(ok=True), 200

@app.post("/webhook")
def webhook():
    data = request.get_json(force=True, silent=True) or {}
    try:
        update = Update.de_json(data, application.bot)
        # –ö–ª–∞–¥—ë–º –∞–ø–¥–µ–π—Ç –≤ –æ—á–µ—Ä–µ–¥—å PTB (–æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)
        application.update_queue.put_nowait(update)
    except Exception as e:
        print("Webhook error:", e)
    return "ok", 200

@app.get("/setwebhook")
def set_webhook():
    # /setwebhook?url=https://<–¢–í–û–ô_–•–û–°–¢>/webhook
    url = request.args.get("url")
    if not url:
        return "–ü–µ—Ä–µ–¥–∞–π ?url=https://<host>/webhook", 400
    async def _set():
        await application.bot.set_webhook(url)
    try:
        asyncio.run(_set())
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ set_webhook: {e}", 500

# ---- –ó–∞–ø—É—Å–∫ Flask (–ª–æ–∫–∞–ª—å–Ω–æ) ----
if __name__ == "__main__":
    port = int(os.environ.get("PORT", "8000"))
    app.run(host="0.0.0.0", port=port)
