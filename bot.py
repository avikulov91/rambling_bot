# bot.py
import os
import re
import math
import pandas as pd
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# === –¢–æ–∫–µ–Ω ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# === –ê–ª–∏–∞—Å—ã ===
try:
    from aliases import ALIASES
except Exception:
    ALIASES = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def normalize_text(s: str) -> str:
    s = (s or "").strip().lower()
    s = s.replace("—ë", "–µ")
    s = re.sub(r"[\"‚Äú‚Äù‚Äû‚Äô']", " ", s)
    s = re.sub(r"\s+", " ", s)
    return s

def resolve_alias(user_text: str) -> str:
    t = normalize_text(user_text)
    mapped = ALIASES.get(t, t)
    return normalize_text(mapped).replace("_", " ").strip()

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ Excel ----------
COL_SYNONYMS = {
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
    "–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
    "—Å–æ—Å—Ç–∞–≤": "—Å–æ—Å—Ç–∞–≤",
    "–≥—Ä–∞–º–º–æ–≤–∫–∞": "–≥—Ä–∞–º–º–æ–≤–∫–∞",
    "–ø–æ—Å—É–¥–∞": "–ø–æ—Å—É–¥–∞",
    "–º–µ—Ç–æ–¥": "–º–µ—Ç–æ–¥",
    "–≥–∞—Ä–Ω–∏—à": "–≥–∞—Ä–Ω–∏—à",
    "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ",
    "–≤—ã—Ö–æ–¥": "–≤—ã—Ö–æ–¥",
}

def canon_columns(df: pd.DataFrame) -> pd.DataFrame:
    ren = {}
    for c in df.columns:
        key = normalize_text(str(c))
        ren[c] = COL_SYNONYMS.get(key, key)
    return df.rename(columns=ren)

def load_table(path: str, kind: str) -> pd.DataFrame:
    df = pd.read_excel(path)
    df = canon_columns(df).ffill()

    if "–Ω–∞–∑–≤–∞–Ω–∏–µ" not in df.columns:
        df.insert(0, "–Ω–∞–∑–≤–∞–Ω–∏–µ", df.iloc[:, 0].astype(str))

    df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] = df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].astype(str).apply(normalize_text)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {kind}: {df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω")
    return df

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------
cocktails_df = load_table(COCKTAILS_FILE, "–∫–æ–∫—Ç–µ–π–ª–µ–π")
zagi_df      = load_table(ZAGOTOVKI_FILE, "–∑–∞–≥–æ—Ç–æ–≤–æ–∫")
tinct_df     = load_table(TINCTURES_FILE, "–Ω–∞—Å—Ç–æ–µ–∫")

cocktail_names = set(cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique())
zagi_names     = set(zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique())
tinct_names    = set(tinct_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique())

# ---------- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã ----------
def format_cocktail(name: str) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∫–æ–∫—Ç–µ–π–ª—å."
    text = f"üç∏ *{name.title()}*\n\n"
    if "–ø–æ—Å—É–¥–∞" in g: text += f"ü•É –ü–æ—Å—É–¥–∞: {g['–ø–æ—Å—É–¥–∞'].iloc[0]}\n"
    if "–º–µ—Ç–æ–¥" in g: text += f"üõ† –ú–µ—Ç–æ–¥: {g['–º–µ—Ç–æ–¥'].iloc[0]}\n"
    if "–≥–∞—Ä–Ω–∏—à" in g: text += f"üåø –ì–∞—Ä–Ω–∏—à: {g['–≥–∞—Ä–Ω–∏—à'].iloc[0]}\n\n"
    if "—Å–æ—Å—Ç–∞–≤" in g and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g:
        for _, r in g.iterrows():
            text += f"‚Äî {r['—Å–æ—Å—Ç–∞–≤']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    return text

def format_zagotovka(name: str) -> str:
    g = zagi_df[zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∑–∞–≥–æ—Ç–æ–≤–∫—É."
    text = f"üß™ *{name.title()}*\n\n"
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g:
        for _, r in g.iterrows():
            text += f"‚Äî {r['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    if "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" in g: text += f"\nüõ† –ú–µ—Ç–æ–¥: {g['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ'].iloc[0]}"
    if "–≤—ã—Ö–æ–¥" in g: text += f"\nüì¶ –í—ã—Ö–æ–¥: {g['–≤—ã—Ö–æ–¥'].iloc[0]}"
    return text

def format_tincture(name: str) -> str:
    g = tinct_df[tinct_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –Ω–∞—Å—Ç–æ–π–∫—É."
    text = f"üß™ *{name.title()}*\n\n"
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g:
        for _, r in g.iterrows():
            text += f"‚Äî {r['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    if "–º–µ—Ç–æ–¥" in g: text += f"\nüõ† –ú–µ—Ç–æ–¥: {g['–º–µ—Ç–æ–¥'].iloc[0]}"
    return text

# ---------- –ü—Ä–µ–º–∏–∫—Å—ã ----------
def make_premix(name: str, volume: int) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty: return "‚ùå –ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞."
    text = f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {name.title()}* ({volume} –º–ª)\n\n"
    total = 0
    parts = []
    for _, r in g.iterrows():
        ing, amt = str(r["—Å–æ—Å—Ç–∞–≤"]), str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"])
        if not ing or not amt: continue
        if any(x in ing.lower() for x in ["—Å–æ–∫", "juice", "sparkling", "—Å–æ–¥–∞", "soda", "cream", "—Å–ª–∏–≤–∫"]):
            continue
        try:
            val = float(re.sub(r"[^0-9.]", "", amt))
            total += val
            parts.append((ing, val))
        except: pass
    for ing, val in parts:
        scaled = int((val / total) * volume)
        scaled = scaled - (scaled % 10)
        text += f"‚Äî {ing} ‚Äî {scaled} –º–ª\n"
    return text

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üç∏ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="list_cocktails")],
        [InlineKeyboardButton("üß™ –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data="list_zagi")],
        [InlineKeyboardButton("üß™ –ù–∞—Å—Ç–æ–π–∫–∏", callback_data="list_tinct")],
    ]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(kb))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = resolve_alias(update.message.text)
    if query in cocktail_names:
        text = format_cocktail(query)
        kb = [[
            InlineKeyboardButton("üì¶ 500 –º–ª", callback_data=f"premix|{query}|500"),
            InlineKeyboardButton("üì¶ 700 –º–ª", callback_data=f"premix|{query}|700"),
            InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{query}|1000"),
        ]]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
    elif query in zagi_names:
        await update.message.reply_text(format_zagotovka(query), parse_mode="Markdown")
    elif query in tinct_names:
        await update.message.reply_text(format_tincture(query), parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    if query.data == "list_cocktails":
        names = sorted(cocktail_names)
        kb = [[InlineKeyboardButton(n.title(), callback_data=f"cocktail_{n}")] for n in names[:20]]
        await query.message.reply_text("üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:", reply_markup=InlineKeyboardMarkup(kb))
    elif query.data == "list_zagi":
        names = sorted(zagi_names)
        kb = [[InlineKeyboardButton(n.title(), callback_data=f"zagi_{n}")] for n in names[:20]]
        await query.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:", reply_markup=InlineKeyboardMarkup(kb))
    elif query.data == "list_tinct":
        names = sorted(tinct_names)
        kb = [[InlineKeyboardButton(n.title(), callback_data=f"tinct_{n}")] for n in names[:20]]
        await query.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:", reply_markup=InlineKeyboardMarkup(kb))
    elif data[0] == "premix":
        name, volume = data[1], int(data[2])
        await query.message.reply_text(make_premix(name, volume), parse_mode="Markdown")
    elif query.data.startswith("cocktail_"):
        name = query.data.replace("cocktail_", "")
        await query.message.reply_text(format_cocktail(name), parse_mode="Markdown")
    elif query.data.startswith("zagi_"):
        name = query.data.replace("zagi_", "")
        await query.message.reply_text(format_zagotovka(name), parse_mode="Markdown")
    elif query.data.startswith("tinct_"):
        name = query.data.replace("tinct_", "")
        await query.message.reply_text(format_tincture(name), parse_mode="Markdown")

# ---------- Flask + webhook ----------
# ---------- Flask + webhook ----------
app = Flask(__name__)

# –°–æ–∑–¥–∞—ë–º Telegram Application
application = Application.builder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(CallbackQueryHandler(handle_callback))

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤ ---
async def run():
    await application.initialize()
    await application.start()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∞–ø–¥–µ–π—Ç–æ–≤ (–≤–∞–∂–Ω–æ!)
    await application.updater.start_polling()

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Flask
asyncio.get_event_loop().create_task(run())

# --- Webhook ---
@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return "OK", 200


@app.route("/setwebhook")
def set_webhook():
    url = "https://rambling-bot.onrender.com/webhook"
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –µ—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è (Render/Gunicorn) ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ create_task
            loop.create_task(application.bot.set_webhook(url))
        else:
            loop.run_until_complete(application.bot.set_webhook(url))
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", 500

# üöÄ –ó–∞–ø—É—Å–∫ Flask + —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
if __name__ == "__main__":
    import asyncio

    async def run():
        await application.initialize()
        await application.start()
        await application.updater.start_polling()  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.get_event_loop().create_task(run())

    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get("PORT", 5000))  # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç
    app.run(host="0.0.0.0", port=port)
