import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
from aliases import ALIASES

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
COCKTAILS_FILE = "tech_cards_coctail_rambling.xlsx"
ZAGOTOVKI_FILE = "tech_cards_zagi.xlsx"
TINCTURES_FILE = "tech_cards_tinctures.xlsx"

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# === –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–º–∏–∫—Å–æ–≤ ===
EXCLUDE_FROM_PREMIX = ["—Å–æ–∫", "juice", "sparkling", "–∏–≥—Ä–∏—Å—Ç", "—Å–æ–¥–∞", "soda", "—Å–ª–∏–≤–∫–∏", "cream"]

# === –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ===
def load_excel(file_path, mode="cocktail"):
    df = pd.read_excel(file_path, sheet_name=0)
    df.columns = df.columns.str.strip().str.lower()  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    df = df.ffill()  # –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–Ω–∏–∑
    if mode == "cocktail":
        return df[["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–ø–æ—Å—É–¥–∞", "–º–µ—Ç–æ–¥", "–≥–∞—Ä–Ω–∏—à", "—Å–æ—Å—Ç–∞–≤", "–≥—Ä–∞–º–º–æ–≤–∫–∞"]]
    elif mode == "zagi":
        return df[["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã", "–≥—Ä–∞–º–º–æ–≤–∫–∞", "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", "–≤—ã—Ö–æ–¥"]]
    elif mode == "tincture":
        return df[["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã", "–≥—Ä–∞–º–º–æ–≤–∫–∞", "–º–µ—Ç–æ–¥"]]
    return df

cocktails_df = load_excel(COCKTAILS_FILE, mode="cocktail")
zagi_df = load_excel(ZAGOTOVKI_FILE, mode="zagi")
tinctures_df = load_excel(TINCTURES_FILE, mode="tincture")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π: {cocktails_df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {zagi_df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫: {tinctures_df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")

# === –ê–ª–∏–∞—Å—ã ===
def resolve_alias(name):
    name = name.strip().lower()
    return ALIASES.get(name, name)

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è ===
def format_cocktail(name):
    df = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name]
    if df.empty:
        return "‚ùå –ö–æ–∫—Ç–µ–π–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    row = df.iloc[0]
    text = f"üç∏ *{row['–Ω–∞–∑–≤–∞–Ω–∏–µ'].title()}*\n\n"
    text += f"ü•É –ü–æ—Å—É–¥–∞: {row['–ø–æ—Å—É–¥–∞']}\n"
    text += f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {row['–º–µ—Ç–æ–¥']}\n"
    text += f"üçä –ì–∞—Ä–Ω–∏—à: {row['–≥–∞—Ä–Ω–∏—à']}\n\n"
    text += "üßæ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
    for _, r in df.iterrows():
        text += f"- {r['—Å–æ—Å—Ç–∞–≤']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    return text

# === –ü—Ä–µ–º–∏–∫—Å—ã ===
def format_premix(name, volume):
    df = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name]
    if df.empty:
        return "‚ùå –ö–æ–∫—Ç–µ–π–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    text = f"ü•§ –ü—Ä–µ–º–∏–∫—Å –¥–ª—è *{df.iloc[0]['–Ω–∞–∑–≤–∞–Ω–∏–µ'].title()}* ({volume} –º–ª):\n\n"
    for _, r in df.iterrows():
        ingr = str(r["—Å–æ—Å—Ç–∞–≤"]).lower()
        if any(bad in ingr for bad in EXCLUDE_FROM_PREMIX):
            continue
        try:
            amount = float(str(r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).split()[0])
        except:
            continue
        scaled = (amount / 100) * volume
        scaled = int(scaled // 10 * 10)
        text += f"- {r['—Å–æ—Å—Ç–∞–≤']} ‚Äî {scaled} –º–ª\n"
    return text

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ ===
def format_zagot(name):
    df = zagi_df[zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name]
    if df.empty:
        return "‚ùå –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    row = df.iloc[0]
    text = f"üß™ *{row['–Ω–∞–∑–≤–∞–Ω–∏–µ'].title()}*\n\n"
    text += "üßæ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
    for _, r in df.iterrows():
        text += f"- {r['–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    text += f"\n‚öôÔ∏è –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: {row['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ']}\n"
    text += f"üì¶ –í—ã—Ö–æ–¥: {row['–≤—ã—Ö–æ–¥']}\n"
    return text

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ–µ–∫ ===
def format_tincture(name):
    df = tinctures_df[tinctures_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name]
    if df.empty:
        return "‚ùå –ù–∞—Å—Ç–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    row = df.iloc[0]
    text = f"üß™ *{row['–Ω–∞–∑–≤–∞–Ω–∏–µ'].title()}*\n\n"
    text += "üßæ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
    for _, r in df.iterrows():
        text += f"- {r['–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
    text += f"\n‚öôÔ∏è –ú–µ—Ç–æ–¥: {row['–º–µ—Ç–æ–¥']}\n"
    return text

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è, '–∑–∞–≥–æ—Ç–æ–≤–∫–∏' –∏–ª–∏ '–Ω–∞—Å—Ç–æ–π–∫–∏'.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()
    resolved = resolve_alias(query)

    if query == "–∑–∞–≥–æ—Ç–æ–≤–∫–∏":
        buttons = [[InlineKeyboardButton(name.title(), callback_data=f"zagi:{name}")]
                   for name in zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()]
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    if query == "–Ω–∞—Å—Ç–æ–π–∫–∏":
        buttons = [[InlineKeyboardButton(name.title(), callback_data=f"tincture:{name}")]
                   for name in tinctures_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()]
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    if resolved in cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].str.lower().values:
        text = format_cocktail(resolved)
        buttons = [
            [InlineKeyboardButton("ü•§ 500 –º–ª", callback_data=f"premix:{resolved}:500"),
             InlineKeyboardButton("ü•§ 700 –º–ª", callback_data=f"premix:{resolved}:700"),
             InlineKeyboardButton("ü•§ 1000 –º–ª", callback_data=f"premix:{resolved}:1000")]
        ]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))
        return

    await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è, '–∑–∞–≥–æ—Ç–æ–≤–∫–∏' –∏–ª–∏ '–Ω–∞—Å—Ç–æ–π–∫–∏'.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    if data[0] == "premix":
        _, name, vol = data
        await query.message.reply_text(format_premix(name, int(vol)), parse_mode="Markdown")
    elif data[0] == "zagi":
        _, name = data
        await query.message.reply_text(format_zagot(name), parse_mode="Markdown")
    elif data[0] == "tincture":
        _, name = data
        await query.message.reply_text(format_tincture(name), parse_mode="Markdown")

# === MAIN ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
