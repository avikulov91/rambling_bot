import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ Render –∏ GitHub)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–∏–∞—Å—ã
from aliases import ALIASES


# === –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–∫—Ç–µ–π–ª–∏ ===
cocktails_df = pd.read_excel(COCKTAILS_FILE)
cocktails = {}
current_name = None
for _, row in cocktails_df.iterrows():
    name = str(row["–ù–∞–∑–≤–∞–Ω–∏–µ"]).strip().lower()
    if name and name != "nan":
        current_name = name
        if current_name not in cocktails:
            cocktails[current_name] = {
                "glass": str(row["–ø–æ—Å—É–¥–∞"]).strip() if not pd.isna(row["–ø–æ—Å—É–¥–∞"]) else "",
                "method": str(row["–º–µ—Ç–æ–¥"]).strip() if not pd.isna(row["–º–µ—Ç–æ–¥"]) else "",
                "garnish": str(row["–≥–∞—Ä–Ω–∏—à"]).strip() if not pd.isna(row["–≥–∞—Ä–Ω–∏—à"]) else "",
                "ingredients": []
            }
    if current_name:
        ingredient = str(row["–°–æ—Å—Ç–∞–≤"]).strip()
        amount = str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
        if ingredient and ingredient != "nan":
            cocktails[current_name]["ingredients"].append((ingredient, amount))


# === –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫–∏ ===
zagotovki_df = pd.read_excel(ZAGOTOVKI_FILE)
zagotovki = {}
current_name = None
for _, row in zagotovki_df.iterrows():
    name = str(row["–Ω–∞–∑–≤–∞–Ω–∏–µ"]).strip().lower()
    if name and name != "nan":
        current_name = name
        if current_name not in zagotovki:
            zagotovki[current_name] = {
                "ingredients": [],
                "method": str(row["–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"]).strip() if not pd.isna(row["–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"]) else "",
                "output": str(row["–≤—ã—Ö–æ–¥"]).strip() if not pd.isna(row["–≤—ã—Ö–æ–¥"]) else ""
            }
    if current_name:
        ingredient = str(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"]).strip()
        amount = str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
        if ingredient and ingredient != "nan":
            zagotovki[current_name]["ingredients"].append((ingredient, amount))


# === –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç–æ–π–∫–∏ ===
tinctures_df = pd.read_excel(TINCTURES_FILE)
tinctures = {}
current_name = None
for _, row in tinctures_df.iterrows():
    name = str(row["–Ω–∞–∑–≤–∞–Ω–∏–µ"]).strip().lower()
    if name and name != "nan":
        current_name = name
        if current_name not in tinctures:
            tinctures[current_name] = {
                "ingredients": [],
                "method": str(row["–º–µ—Ç–æ–¥"]).strip() if not pd.isna(row["–º–µ—Ç–æ–¥"]) else ""
            }
    if current_name:
        ingredient = str(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"]).strip()
        amount = str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"]).strip()
        if ingredient and ingredient != "nan":
            tinctures[current_name]["ingredients"].append((ingredient, amount))


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def normalize_name(name: str) -> str:
    name = name.strip().lower()
    return ALIASES.get(name, name)

def format_cocktail(name: str, data: dict) -> str:
    text = f"üç∏ *{name.title()}*\n"
    text += f"ü•Ç –ü–æ—Å—É–¥–∞: {data['glass']}\n"
    text += f"‚öíÔ∏è –ú–µ—Ç–æ–¥: {data['method']}\n"
    text += f"üçã –ì–∞—Ä–Ω–∏—à: {data['garnish']}\n\n"
    text += "üìã *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
    for ing, amt in data["ingredients"]:
        text += f"‚Äî {ing} ‚Äî {amt}\n"
    return text

def format_zagotovka(name: str, data: dict) -> str:
    text = f"üß™ *{name.title()}*\n\n"
    text += "üìã *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
    for ing, amt in data["ingredients"]:
        text += f"‚Äî {ing} ‚Äî {amt}\n"
    text += f"\n‚öíÔ∏è –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: {data['method']}\n"
    text += f"üì¶ –í—ã—Ö–æ–¥: {data['output']}\n"
    return text

def format_tincture(name: str, data: dict) -> str:
    text = f"üß™ *{name.title()}*\n\n"
    text += "üìã *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
    for ing, amt in data["ingredients"]:
        text += f"‚Äî {ing} ‚Äî {amt}\n"
    text += f"\n‚öíÔ∏è –ú–µ—Ç–æ–¥: {data['method']}\n"
    return text

def make_premix(name: str, data: dict, volume: int) -> str:
    text = f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {name.title()}* ({volume} –º–ª)\n\n"
    ingredients = []
    total = sum(
        float(amt.replace("ml", "").replace("–º–ª", "").strip())
        for ing, amt in data["ingredients"]
        if "ml" in amt or "–º–ª" in amt
    )
    for ing, amt in data["ingredients"]:
        if any(x in ing.lower() for x in ["—Å–æ–∫", "juice", "sparkling", "—Å–æ–¥–∞", "soda", "cream", "—Å–ª–∏–≤–∫"]):
            continue
        try:
            base_amt = float(amt.replace("ml", "").replace("–º–ª", "").strip())
            scaled = int((base_amt / total) * volume)
            scaled = scaled - (scaled % 10)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ 10
            ingredients.append((ing, f"{scaled} –º–ª"))
        except:
            pass
    for ing, amt in ingredients:
        text += f"‚Äî {ing} ‚Äî {amt}\n"
    return text


# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ —Å–ª–æ–≤–æ *–ó–∞–≥–æ—Ç–æ–≤–∫–∏* / *–ù–∞—Å—Ç–æ–π–∫–∏*.", parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()
    key = normalize_name(query)

    if key in cocktails:
        data = cocktails[key]
        text = format_cocktail(key, data)
        keyboard = [
            [
                InlineKeyboardButton("üì¶ 500 –º–ª", callback_data=f"premix|{key}|500"),
                InlineKeyboardButton("üì¶ 700 –º–ª", callback_data=f"premix|{key}|700"),
                InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{key}|1000"),
            ]
        ]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query == "–∑–∞–≥–æ—Ç–æ–≤–∫–∏":
        keyboard = [[InlineKeyboardButton(name.title(), callback_data=f"zagotovka|{name}")] for name in zagotovki.keys()]
        await update.message.reply_text("üß™ *–°–ø–∏—Å–æ–∫ –∑–∞–≥–æ—Ç–æ–≤–æ–∫:*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif key in zagotovki:
        data = zagotovki[key]
        text = format_zagotovka(key, data)
        await update.message.reply_text(text, parse_mode="Markdown")
    elif query == "–Ω–∞—Å—Ç–æ–π–∫–∏":
        keyboard = [[InlineKeyboardButton(name.title(), callback_data=f"tincture|{name}")] for name in tinctures.keys()]
        await update.message.reply_text("üß™ *–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–µ–∫:*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif key in tinctures:
        data = tinctures[key]
        text = format_tincture(key, data)
        await update.message.reply_text(text, parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    if data[0] == "premix":
        name, volume = data[1], int(data[2])
        text = make_premix(name, cocktails[name], volume)
        await query.message.reply_text(text, parse_mode="Markdown")
    elif data[0] == "zagotovka":
        name = data[1]
        text = format_zagotovka(name, zagotovki[name])
        await query.message.reply_text(text, parse_mode="Markdown")
    elif data[0] == "tincture":
        name = data[1]
        text = format_tincture(name, tinctures[name])
        await query.message.reply_text(text, parse_mode="Markdown")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π: {len(cocktails)}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {len(zagotovki)}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫: {len(tinctures)}")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
