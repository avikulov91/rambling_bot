import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from aliases import ALIASES  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–ª–∏–∞—Å–æ–≤

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# –ü—É—Ç–∏ –∫ Excel
COCKTAILS_FILE = "tech_cards_coctail_rambling.xlsx"
ZAGOTOVKI_FILE = "tech_cards_zagi.xlsx"
TINCTURES_FILE = "tech_cards_tinctures.xlsx"


# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
def load_excel(file_path, mode="cocktails"):
    df = pd.read_excel(file_path)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
    if "–ù–∞–∑–≤–∞–Ω–∏–µ" in df.columns:
        df["–ù–∞–∑–≤–∞–Ω–∏–µ"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ"].fillna(method="ffill")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    df["–ù–∞–∑–≤–∞–Ω–∏–µ"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ"].astype(str).str.strip().str.lower()

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.dropna(how="all")

    # –†–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    if mode == "cocktails":
        df.columns = ["cocktail_name", "glass", "method", "garnish", "ingredient", "amount"]
    elif mode == "zagi":
        df.columns = ["name", "ingredient", "amount", "method", "output"]
    elif mode == "tinctures":
        df.columns = ["name", "ingredient", "amount", "method"]

    return df


cocktails_df = load_excel(COCKTAILS_FILE, mode="cocktails")
zagi_df = load_excel(ZAGOTOVKI_FILE, mode="zagi")
tinctures_df = load_excel(TINCTURES_FILE, mode="tinctures")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π: {cocktails_df['cocktail_name'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {zagi_df['name'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫: {tinctures_df['name'].nunique()}")


# === –ü–û–ò–°–ö ===
def find_cocktail(query):
    q = query.strip().lower()

    # –ê–ª–∏–∞—Å—ã
    if q in ALIASES:
        q = ALIASES[q]

    results = cocktails_df[cocktails_df["cocktail_name"] == q]
    return results if not results.empty else None


def find_zagotovka(query):
    q = query.strip().lower()
    results = zagi_df[zagi_df["name"] == q]
    return results if not results.empty else None


def find_tincture(query):
    q = query.strip().lower()
    results = tinctures_df[tinctures_df["name"] == q]
    return results if not results.empty else None


# === –•–ï–ù–î–õ–ï–†–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üç∏ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è, –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫–∏.\n\n"
        "üß™ –ù–∞–ø–∏—à–∏ '–∑–∞–≥–æ—Ç–æ–≤–∫–∏' –∏–ª–∏ '–Ω–∞—Å—Ç–æ–π–∫–∏', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()

    # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞
    if text == "–∑–∞–≥–æ—Ç–æ–≤–∫–∏":
        buttons = [InlineKeyboardButton(name.title(), callback_data=f"zagi|{name}") for name in zagi_df["name"].unique()]
        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        await update.message.reply_text("üß™ –ó–∞–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if text == "–Ω–∞—Å—Ç–æ–π–∫–∏":
        buttons = [InlineKeyboardButton(name.title(), callback_data=f"tinct|{name}") for name in tinctures_df["name"].unique()]
        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        await update.message.reply_text("üß™ –ù–∞—Å—Ç–æ–π–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –ö–æ–∫—Ç–µ–π–ª–∏
    cocktail = find_cocktail(text)
    if cocktail is not None:
        base = cocktail.iloc[0]
        ingredients = cocktail[["ingredient", "amount"]].dropna().values.tolist()
        ing_list = "\n".join([f"‚Ä¢ {i} ‚Äî {a}" for i, a in ingredients])
        msg = (
            f"üç∏ {base['cocktail_name'].title()}\n"
            f"ü•Ç –ü–æ—Å—É–¥–∞: {base['glass']}\n"
            f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {base['method']}\n"
            f"üçã –ì–∞—Ä–Ω–∏—à: {base['garnish']}\n\n"
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ing_list}"
        )
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–º–∏–∫—Å–æ–≤
        keyboard = [
            [InlineKeyboardButton("500 –º–ª", callback_data=f"premix|{base['cocktail_name']}|500")],
            [InlineKeyboardButton("700 –º–ª", callback_data=f"premix|{base['cocktail_name']}|700")],
            [InlineKeyboardButton("1000 –º–ª", callback_data=f"premix|{base['cocktail_name']}|1000")],
        ]
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –ó–∞–≥–æ—Ç–æ–≤–∫–∏
    z = find_zagotovka(text)
    if z is not None:
        base = z.iloc[0]
        ingredients = z[["ingredient", "amount"]].dropna().values.tolist()
        ing_list = "\n".join([f"‚Ä¢ {i} ‚Äî {a}" for i, a in ingredients])
        msg = (
            f"üß™ {base['name'].title()}\n\n"
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ing_list}\n\n"
            f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {base['method']}\n"
            f"üì¶ –í—ã—Ö–æ–¥: {base['output']}"
        )
        await update.message.reply_text(msg)
        return

    # –ù–∞—Å—Ç–æ–π–∫–∏
    t = find_tincture(text)
    if t is not None:
        base = t.iloc[0]
        ingredients = t[["ingredient", "amount"]].dropna().values.tolist()
        ing_list = "\n".join([f"‚Ä¢ {i} ‚Äî {a}" for i, a in ingredients])
        msg = (
            f"üß™ {base['name'].title()}\n\n"
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ing_list}\n\n"
            f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {base['method']}"
        )
        await update.message.reply_text(msg)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    if data[0] == "premix":
        name, volume = data[1], int(data[2])
        cocktail = find_cocktail(name)
        if cocktail is not None:
            # –ò—Å–∫–ª—é—á–∞–µ–º "—Å–æ–∫–∏", "—Å–ª–∏–≤–∫–∏", "—Å–æ–¥—É", "–∏–≥—Ä–∏—Å—Ç–æ–µ"
            bad_words = ["juice", "—Å–æ–∫", "—Å–ª–∏–≤–∫–∏", "cream", "—Å–æ–¥–∞", "sparkling", "–∏–≥—Ä–∏—Å—Ç–æ–µ"]
            premix = cocktail[~cocktail["ingredient"].str.lower().str.contains("|".join(bad_words), na=False)]
            premix = premix[["ingredient", "amount"]].dropna().values.tolist()
            # –ü–µ—Ä–µ—Å—á–µ—Ç
            scaled = []
            for i, a in premix:
                try:
                    val = float(str(a).split()[0])
                    unit = str(a).split()[1] if len(str(a).split()) > 1 else "ml"
                    new_val = (val / 100) * volume
                    new_val = int(new_val // 10 * 10)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ 10
                    scaled.append(f"‚Ä¢ {i} ‚Äî {new_val} {unit}")
                except:
                    scaled.append(f"‚Ä¢ {i} ‚Äî {a}")
            msg = f"ü•É –ü—Ä–µ–º–∏–∫—Å –¥–ª—è {name.title()} ({volume} –º–ª):\n\n" + "\n".join(scaled)
            await query.edit_message_text(msg)
    elif data[0] == "zagi":
        name = data[1]
        z = find_zagotovka(name)
        if z is not None:
            base = z.iloc[0]
            ingredients = z[["ingredient", "amount"]].dropna().values.tolist()
            ing_list = "\n".join([f"‚Ä¢ {i} ‚Äî {a}" for i, a in ingredients])
            msg = (
                f"üß™ {base['name'].title()}\n\n"
                f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ing_list}\n\n"
                f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {base['method']}\n"
                f"üì¶ –í—ã—Ö–æ–¥: {base['output']}"
            )
            await query.edit_message_text(msg)
    elif data[0] == "tinct":
        name = data[1]
        t = find_tincture(name)
        if t is not None:
            base = t.iloc[0]
            ingredients = t[["ingredient", "amount"]].dropna().values.tolist()
            ing_list = "\n".join([f"‚Ä¢ {i} ‚Äî {a}" for i, a in ingredients])
            msg = (
                f"üß™ {base['name'].title()}\n\n"
                f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ing_list}\n\n"
                f"‚öôÔ∏è –ú–µ—Ç–æ–¥: {base['method']}"
            )
            await query.edit_message_text(msg)


# === MAIN ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()


if __name__ == "__main__":
    main()
