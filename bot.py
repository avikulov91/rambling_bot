import os
import pandas as pd
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from aliases import ALIASES

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ Render –∏ GitHub)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞—ë–º Application (–±–µ–∑ polling)
application = Application.builder().token(TOKEN).build()


# === –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ Excel ===
def load_excel(file, mode="cocktail"):
    df = pd.read_excel(file)
    df = df.ffill()  # –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    df.columns = df.columns.str.strip()
    if "–ù–∞–∑–≤–∞–Ω–∏–µ" in df.columns:
        df["–ù–∞–∑–≤–∞–Ω–∏–µ"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ"].astype(str).str.strip().str.lower()
    return df


cocktails_df = load_excel(COCKTAILS_FILE, "cocktail")
zagi_df = load_excel(ZAGOTOVKI_FILE, "zagi")
tinctures_df = load_excel(TINCTURES_FILE, "tinctures")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π: {cocktails_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {zagi_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫: {tinctures_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].nunique()}")


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üç∏ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="show_cocktails")],
        [InlineKeyboardButton("üß™ –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data="show_zagi")],
        [InlineKeyboardButton("üß™ –ù–∞—Å—Ç–æ–π–∫–∏", callback_data="show_tinctures")],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Rambling-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    key = ALIASES.get(text, text)

    # === –ö–æ–∫—Ç–µ–π–ª–∏ ===
    if key in cocktails_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
        row = cocktails_df[cocktails_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == key].iloc[0]
        reply = f"üç∏ *{row['–ù–∞–∑–≤–∞–Ω–∏–µ'].title()}*\n\n"
        reply += f"–ü–æ—Å—É–¥–∞: {row['–ø–æ—Å—É–¥–∞']}\n–ú–µ—Ç–æ–¥: {row['–º–µ—Ç–æ–¥']}\n–ì–∞—Ä–Ω–∏—à: {row['–≥–∞—Ä–Ω–∏—à']}\n\n"
        ingredients = cocktails_df[cocktails_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == key][["–°–æ—Å—Ç–∞–≤", "–≥—Ä–∞–º–º–æ–≤–∫–∞"]]
        for _, ing in ingredients.iterrows():
            reply += f"- {ing['–°–æ—Å—Ç–∞–≤']} ‚Äî {ing['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"

        keyboard = [
            [
                InlineKeyboardButton("üì¶ –ü—Ä–µ–º–∏–∫—Å 500 –º–ª", callback_data=f"premix_500_{key}"),
                InlineKeyboardButton("üì¶ –ü—Ä–µ–º–∏–∫—Å 700 –º–ª", callback_data=f"premix_700_{key}"),
                InlineKeyboardButton("üì¶ –ü—Ä–µ–º–∏–∫—Å 1000 –º–ª", callback_data=f"premix_1000_{key}"),
            ]
        ]
        await update.message.reply_text(reply, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return

    # === –ó–∞–≥–æ—Ç–æ–≤–∫–∏ ===
    if key in zagi_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
        row = zagi_df[zagi_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == key]
        reply = f"üß™ *{key.title()}*\n\n"
        for _, r in row.iterrows():
            reply += f"- {r['–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
        reply += f"\n–ú–µ—Ç–æ–¥: {row.iloc[0]['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ']}\n–í—ã—Ö–æ–¥: {row.iloc[0]['–≤—ã—Ö–æ–¥']}"
        await update.message.reply_text(reply, parse_mode="Markdown")
        return

    # === –ù–∞—Å—Ç–æ–π–∫–∏ ===
    if key in tinctures_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].values:
        row = tinctures_df[tinctures_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == key]
        reply = f"üß™ *{key.title()}*\n\n"
        for _, r in row.iterrows():
            reply += f"- {r['–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã']} ‚Äî {r['–≥—Ä–∞–º–º–æ–≤–∫–∞']}\n"
        reply += f"\n–ú–µ—Ç–æ–¥: {row.iloc[0]['–º–µ—Ç–æ–¥']}"
        await update.message.reply_text(reply, parse_mode="Markdown")
        return

    await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# === Callback ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "show_cocktails":
        names = cocktails_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].unique()
        keyboard = [[InlineKeyboardButton(n.title(), callback_data=f"cocktail_{n}")] for n in names[:20]]
        await query.message.reply_text("üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "show_zagi":
        names = zagi_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].unique()
        keyboard = [[InlineKeyboardButton(n.title(), callback_data=f"zagi_{n}")] for n in names[:20]]
        await query.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "show_tinctures":
        names = tinctures_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].unique()
        keyboard = [[InlineKeyboardButton(n.title(), callback_data=f"tinct_{n}")] for n in names[:20]]
        await query.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(CallbackQueryHandler(handle_callback))


# === Flask endpoint –¥–ª—è Telegram ===
@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok", 200


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤—Ä—É—á–Ω—É—é
@app.route("/setwebhook")
def set_webhook():
    url = "https://rambling-bot.onrender.com/webhook"
    application.bot.set_webhook(url)
    return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

def make_premix(name: str, data: dict, volume: int) -> str:
    text = f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {name.title()}* ({volume} –º–ª)\n\n"
    ingredients = []
    total = sum(
        float(amt.replace("ml", "").replace("–º–ª", "").strip())
        for ing, amt in data["ingredients"]
        if "ml" in amt or "–º–ª" in amt
    )
    for ing, amt in data["ingredients"]:
        if any(x in ing.lower() for x in ["—Å–æ–∫", "juice", "sparkling", "—Å–æ–¥–∞", "soda", "cream", "—Å–ª–∏–≤–∫"]):
            continue
        try:
            base_amt = float(amt.replace("ml", "").replace("–º–ª", "").strip())
            scaled = int((base_amt / total) * volume)
            scaled = scaled - (scaled % 10)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ 10
            ingredients.append((ing, f"{scaled} –º–ª"))
        except:
            pass
    for ing, amt in ingredients:
        text += f"‚Äî {ing} ‚Äî {amt}\n"
    return text


# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ —Å–ª–æ–≤–æ *–ó–∞–≥–æ—Ç–æ–≤–∫–∏* / *–ù–∞—Å—Ç–æ–π–∫–∏*.", parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()
    key = normalize_name(query)

    if key in cocktails:
        data = cocktails[key]
        text = format_cocktail(key, data)
        keyboard = [
            [
                InlineKeyboardButton("üì¶ 500 –º–ª", callback_data=f"premix|{key}|500"),
                InlineKeyboardButton("üì¶ 700 –º–ª", callback_data=f"premix|{key}|700"),
                InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{key}|1000"),
            ]
        ]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query == "–∑–∞–≥–æ—Ç–æ–≤–∫–∏":
        keyboard = [[InlineKeyboardButton(name.title(), callback_data=f"zagotovka|{name}")] for name in zagotovki.keys()]
        await update.message.reply_text("üß™ *–°–ø–∏—Å–æ–∫ –∑–∞–≥–æ—Ç–æ–≤–æ–∫:*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif key in zagotovki:
        data = zagotovki[key]
        text = format_zagotovka(key, data)
        await update.message.reply_text(text, parse_mode="Markdown")
    elif query == "–Ω–∞—Å—Ç–æ–π–∫–∏":
        keyboard = [[InlineKeyboardButton(name.title(), callback_data=f"tincture|{name}")] for name in tinctures.keys()]
        await update.message.reply_text("üß™ *–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–µ–∫:*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    elif key in tinctures:
        data = tinctures[key]
        text = format_tincture(key, data)
        await update.message.reply_text(text, parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    if data[0] == "premix":
        name, volume = data[1], int(data[2])
        text = make_premix(name, cocktails[name], volume)
        await query.message.reply_text(text, parse_mode="Markdown")
    elif data[0] == "zagotovka":
        name = data[1]
        text = format_zagotovka(name, zagotovki[name])
        await query.message.reply_text(text, parse_mode="Markdown")
    elif data[0] == "tincture":
        name = data[1]
        text = format_tincture(name, tinctures[name])
        await query.message.reply_text(text, parse_mode="Markdown")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π: {len(cocktails)}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {len(zagotovki)}")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫: {len(tinctures)}")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
