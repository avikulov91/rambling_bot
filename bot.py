# bot.py  ‚Äî long polling –≤–µ—Ä—Å–∏—è (–±–µ–∑ Flask)
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–≤ venv): pandas, openpyxl, python-telegram-bot==20.3, httpx==0.24.1, python-dotenv (–æ–ø—Ü.)
import os
import re
import math
import pandas as pd
from typing import Dict, List, Tuple, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# === –¢–í–û–ô –¢–û–ö–ï–ù ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (—Ä–∞–±–æ—Ç–∞—é—Ç –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ) ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE   = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE   = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE   = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# === –ê–ª–∏–∞—Å—ã (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ä—è–¥–æ–º) ===
try:
    from aliases import ALIASES  # —Å–ª–æ–≤–∞—Ä—å: –∑–∞–ø—Ä–æ—Å -> –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å aliases.py: {e}")
    ALIASES = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ----------
def normalize_text(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, trim, –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —ë->–µ, —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏/–¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–±–µ–ª–æ–≤."""
    s = (s or "").strip().lower()
    s = s.replace("—ë", "–µ")
    s = re.sub(r"[\"‚Äú‚Äù‚Äû‚Äô']", " ", s)  # –∫–∞–≤—ã—á–∫–∏/–∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã -> –ø—Ä–æ–±–µ–ª
    s = re.sub(r"\s+", " ", s)        # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    return s

def resolve_alias(user_text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è –∫–æ–∫—Ç–µ–π–ª—è/–∑–∞–≥–æ—Ç–æ–≤–∫–∏/–Ω–∞—Å—Ç–æ–π–∫–∏ –ø–æ –∞–ª–∏–∞—Å–∞–º.
       –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç underscore –≤ –ø—Ä–æ–±–µ–ª (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π)."""
    t = normalize_text(user_text)
    mapped = ALIASES.get(t, t)
    mapped = normalize_text(mapped).replace("_", " ").strip()
    return mapped

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ Excel –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ ----------
COL_SYNONYMS = {
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: -> –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",

    "–ø–æ—Å—É–¥–∞": "–ø–æ—Å—É–¥–∞",
    "glass": "–ø–æ—Å—É–¥–∞",

    "–º–µ—Ç–æ–¥": "–º–µ—Ç–æ–¥",
    "method": "–º–µ—Ç–æ–¥",
    "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ",

    "–≥–∞—Ä–Ω–∏—à": "–≥–∞—Ä–Ω–∏—à",
    "garnish": "–≥–∞—Ä–Ω–∏—à",

    "—Å–æ—Å—Ç–∞–≤": "—Å–æ—Å—Ç–∞–≤",
    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": "—Å–æ—Å—Ç–∞–≤",

    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
    "–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã": "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",   # —á–∞—Å—Ç–∞—è –æ–ø–µ—á–∞—Ç–∫–∞ –≤ —Ñ–∞–π–ª–∞—Ö

    "–≥—Ä–∞–º–º–æ–≤–∫–∞": "–≥—Ä–∞–º–º–æ–≤–∫–∞",
    "amount": "–≥—Ä–∞–º–º–æ–≤–∫–∞",

    "–≤—ã—Ö–æ–¥": "–≤—ã—Ö–æ–¥",
    "yield": "–≤—ã—Ö–æ–¥",

    "–º–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è": "–º–µ—Ç–æ–¥",
}

def canon_columns(df: pd.DataFrame) -> pd.DataFrame:
    """–ü–æ–Ω–∏–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Ç—Ä–∏–º–∏–º, –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å–∏–Ω–æ–Ω–∏–º–æ–≤."""
    ren = {}
    for c in df.columns:
        k = normalize_text(str(c))
        ren[c] = COL_SYNONYMS.get(k, k)
    return df.rename(columns=ren)

def load_table(path: str, kind: str) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –∑–∞–ø–æ–ª–∞—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ '–Ω–∞–∑–≤–∞–Ω–∏–µ' –∏ —á–∏—Å—Ç–∏—Ç –º—É—Å–æ—Ä."""
    df = pd.read_excel(path)
    df = canon_columns(df).ffill()
    if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in df.columns:
        df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] = df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].astype(str).apply(normalize_text)
        # —É–±–µ—Ä—ë–º —è–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏/–º—É—Å–æ—Ä
        df = df[~df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].isin(["", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "name", "title", "none"])]
    # –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏–≤–µ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    for col in df.columns:
        if df[col].dtype == object:
            df[col] = df[col].astype(str).apply(lambda x: normalize_text(x) if col != "–≥—Ä–∞–º–º–æ–≤–∫–∞" else x.strip())
    # –î–æ–ø. —á–∏—Å—Ç–∫–∞ –≥—Ä–∞–º–º–æ–≤–∫–∏: trim
    if "–≥—Ä–∞–º–º–æ–≤–∫–∞" in df.columns:
        df["–≥—Ä–∞–º–º–æ–≤–∫–∞"] = df["–≥—Ä–∞–º–º–æ–≤–∫–∞"].astype(str).str.strip()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {kind}: {df['–Ω–∞–∑–≤–∞–Ω–∏–µ'].nunique() if '–Ω–∞–∑–≤–∞–Ω–∏–µ' in df.columns else '‚Äî'} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω")
    return df

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------
cocktails_df = load_table(COCKTAILS_FILE, "–∫–æ–∫—Ç–µ–π–ª–µ–π")
zagi_df      = load_table(ZAGOTOVKI_FILE, "–∑–∞–≥–æ—Ç–æ–≤–æ–∫")
tinct_df     = load_table(TINCTURES_FILE, "–Ω–∞—Å—Ç–æ–µ–∫")

# –°–µ—Ç—ã –∏–º—ë–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
cocktail_names = sorted(cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in cocktails_df.columns else []
zagi_names     = sorted(zagi_df.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", pd.Series([], dtype=str)).unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in zagi_df.columns else []
tinct_names    = sorted(tinct_df.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", pd.Series([], dtype=str)).unique()) if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in tinct_df.columns else []

cocktail_names_set = set(cocktail_names)
zagi_names_set     = set(zagi_names)
tinct_names_set    = set(tinct_names)

# ---------- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã ----------
def title_cap(s: str) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞). –ù–µ –ª–æ–º–∞–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É."""
    return " ".join(w.capitalize() for w in (s or "").split())

def format_cocktail(name: str) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∫–æ–∫—Ç–µ–π–ª—å."
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—Å—É–¥—ã/–º–µ—Ç–æ–¥–∞/–≥–∞—Ä–Ω–∏—à–∞
    glass   = g["–ø–æ—Å—É–¥–∞"].iloc[0]   if "–ø–æ—Å—É–¥–∞"   in g.columns else ""
    method  = g["–º–µ—Ç–æ–¥"].iloc[0]    if "–º–µ—Ç–æ–¥"    in g.columns else ""
    garnish = g["–≥–∞—Ä–Ω–∏—à"].iloc[0]   if "–≥–∞—Ä–Ω–∏—à"   in g.columns else ""

    lines = [f"üç∏ *{title_cap(name)}*", ""]
    if glass:   lines.append(f"ü•É –ü–æ—Å—É–¥–∞: {glass}")
    if method:  lines.append(f"üõ† –ú–µ—Ç–æ–¥: {method}")
    if garnish: lines.append(f"üåø –ì–∞—Ä–Ω–∏—à: {garnish}")
    lines.append("")

    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    if "—Å–æ—Å—Ç–∞–≤" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing = r["—Å–æ—Å—Ç–∞–≤"]
            amt = r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]
            if ing and ing not in ["", "—Å–æ—Å—Ç–∞–≤"] and amt and amt != "":
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    else:
        lines.append("_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö_")

    return "\n".join(lines)

def format_zagotovka(name: str) -> str:
    g = zagi_df[zagi_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –∑–∞–≥–æ—Ç–æ–≤–∫—É."
    lines = [f"üß™ *{title_cap(name)}*", ""]
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing = r["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]
            amt = r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]
            if ing and ing not in ["", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"] and amt and amt != "":
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    if "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" in g.columns and g["–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"].iloc[0]:
        lines.append("")
        lines.append(f"üßØ –ú–µ—Ç–æ–¥: {g['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ'].iloc[0]}")
    if "–≤—ã—Ö–æ–¥" in g.columns and g["–≤—ã—Ö–æ–¥"].iloc[0]:
        lines.append(f"üì¶ –í—ã—Ö–æ–¥: {g['–≤—ã—Ö–æ–¥'].iloc[0]}")
    return "\n".join(lines)

def format_tincture(name: str) -> str:
    g = tinct_df[tinct_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty:
        return "‚ùå –ù–µ –Ω–∞—à—ë–ª –Ω–∞—Å—Ç–æ–π–∫—É."
    lines = [f"üß™ *{title_cap(name)}*", ""]
    if "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã" in g.columns and "–≥—Ä–∞–º–º–æ–≤–∫–∞" in g.columns:
        for _, r in g.iterrows():
            ing = r["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]
            amt = r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]
            if ing and ing not in ["", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"] and amt and amt != "":
                lines.append(f"‚Äî {ing} ‚Äî {amt}")
    if "–º–µ—Ç–æ–¥" in g.columns and g["–º–µ—Ç–æ–¥"].iloc[0]:
        lines.append("")
        lines.append(f"üßØ –ú–µ—Ç–æ–¥: {g['–º–µ—Ç–æ–¥'].iloc[0]}")
    return "\n".join(lines)

# ---------- –ü—Ä–µ–º–∏–∫—Å—ã ----------
EXCLUDE_TOKENS = [
    # –ø–æ—Ä—Ç–∏—Ç—Å—è/–≥–∞–∑/–º–æ–ª–æ—á–∫–∞/—Ç–æ–ø—ã
    "juice", "—Å–æ–∫", "sparkling", "–∏–≥—Ä–∏—Å—Ç", "soda", "—Å–æ–¥–∞", "–∫–æ–ª–∞", "coke", "sprite", "tonic", "—Ç–æ–Ω–∏–∫",
    "cream", "—Å–ª–∏–≤–∫", "milk", "–º–æ–ª–æ–∫–æ",
    "puree", "–ø—é—Ä–µ",
    "top", "–¥—ç—à", "dash", "barspoon", "–±—Å", "—â–µ–ø–æ—Ç–∫–∞", "pinch", "pt",
]
# –†–∞–∑—Ä–µ—à–∞–µ–º —Å–ª–∏–≤–æ—á–Ω—ã–π –ª–∏–∫—ë—Ä
ALLOW_CREAM_LIQUEUR = [
    "baileys", "irish cream", "—Å–ª–∏–≤–æ—á–Ω", "liqueur", "–ª–∏–∫–µ—Ä", "–ª–∏–∫—ë—Ä"
]

def is_cream_liqueur(ing: str) -> bool:
    s = normalize_text(ing)
    if "baileys" in s or "irish cream" in s:
        return True
    if "—Å–ª–∏–≤–æ—á–Ω" in s and ("–ª–∏–∫–µ—Ä" in s or "–ª–∏–∫—ë—Ä" in s or "liqueur" in s):
        return True
    return False

def parse_ml(s: str) -> Optional[float]:
    """–î–æ—Å—Ç–∞—ë–º —á–∏—Å–ª–æ (–º–ª) –∏–∑ —Å—Ç—Ä–æ–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã."""
    if s is None:
        return None
    t = s.strip().lower()
    # —è–≤–Ω—ã–µ –Ω–µ-–º–ª
    if any(x in t for x in ["top", "–¥—ç—à", "dash", "barspoon", "pt", "—â–µ–ø–æ—Ç–∫–∞", "pinch"]):
        return None
    # –ª–æ–≤–∏–º —á–∏—Å–ª–æ –∏ —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ml/–º–ª (–∏–ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)
    m = re.search(r"(\d+([.,]\d+)?)\s*(ml|–º–ª)?\b", t)
    if not m:
        return None
    val = float(m.group(1).replace(",", "."))
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥—Ä—É–≥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ (–≥—Ä, –≥—Ä–∞–º–º –∏ —Ç.–ø.) ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –º–ª
    if re.search(r"\b(g|–≥—Ä|–≥—Ä–∞–º–º|oz|—É–Ω—Ü)\b", t):
        return None
    return val

def make_premix(name: str, volume: int) -> str:
    g = cocktails_df[cocktails_df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
    if g.empty or "—Å–æ—Å—Ç–∞–≤" not in g.columns or "–≥—Ä–∞–º–º–æ–≤–∫–∞" not in g.columns:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏–∫—Å."

    # –≤—ã–±–∏—Ä–∞–µ–º –≥–æ–¥–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    usable: List[Tuple[str, float]] = []
    for _, r in g.iterrows():
        ing = r["—Å–æ—Å—Ç–∞–≤"]
        amt = r["–≥—Ä–∞–º–º–æ–≤–∫–∞"]
        if not ing or ing in ["", "—Å–æ—Å—Ç–∞–≤"]:
            continue

        # –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Å–ª–∏–≤–æ—á–Ω–æ–≥–æ –ª–∏–∫—ë—Ä–∞)
        if not is_cream_liqueur(ing) and any(tok in normalize_text(ing) for tok in EXCLUDE_TOKENS):
            continue

        ml = parse_ml(amt)
        if ml is None or ml <= 0:
            continue
        usable.append((ing, ml))

    if not usable:
        return f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {title_cap(name)}* ({volume} –º–ª)\n\n_–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏–∫—Å–∞_"

    total = sum(x[1] for x in usable)
    lines = [f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {title_cap(name)}* ({volume} –º–ª)", ""]

    for ing, ml in usable:
        scaled = (ml / total) * volume
        scaled = math.floor(scaled / 10.0) * 10  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ 10 –º–ª
        if scaled <= 0:
            continue
        lines.append(f"‚Äî {ing} ‚Äî {int(scaled)} –º–ª")

    return "\n".join(lines) if len(lines) > 2 else f"üì¶ *–ü—Ä–µ–º–∏–∫—Å {title_cap(name)}*: _–Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—à–ª–æ_"

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üç∏ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="list|cocktails|0")],
        [InlineKeyboardButton("üß™ –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data="list|zagi|0")],
        [InlineKeyboardButton("üß™ –ù–∞—Å—Ç–æ–π–∫–∏", callback_data="list|tinct|0")],
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Rambling-–±–æ—Ç.\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb()
    )

def paged_names(kind: str, page: int, page_size: int = 20) -> Tuple[List[str], int]:
    names = {
        "cocktails": cocktail_names,
        "zagi":      zagi_names,
        "tinct":     tinct_names,
    }.get(kind, [])
    total_pages = max(1, math.ceil(len(names) / page_size))
    page = max(0, min(page, total_pages - 1))
    start = page * page_size
    return names[start:start + page_size], total_pages

def make_list_kb(kind: str, page: int) -> InlineKeyboardMarkup:
    items, total_pages = paged_names(kind, page)
    rows = [[InlineKeyboardButton(title_cap(n), callback_data=f"show|{kind}|{n}")] for n in items]
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list|{kind}|{page-1}"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"list|{kind}|{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(rows)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if data[0] == "list":
        kind, page = data[1], int(data[2])
        title = {"cocktails": "üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:",
                 "zagi":      "üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:",
                 "tinct":     "üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:"}.get(kind, "–í—ã–±–µ—Ä–∏:")
        await query.message.reply_text(title, reply_markup=make_list_kb(kind, page))
        return

    # –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    if data[0] == "show":
        kind, name = data[1], data[2]
        if kind == "cocktails":
            text = format_cocktail(name)
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{name}|500"),
                InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{name}|700"),
                InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{name}|1000"),
            ]])
            await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        elif kind == "zagi":
            await query.message.reply_text(format_zagotovka(name), parse_mode="Markdown")
        elif kind == "tinct":
            await query.message.reply_text(format_tincture(name), parse_mode="Markdown")
        return

    # –ü—Ä–µ–º–∏–∫—Å—ã
    if data[0] == "premix":
        name, vol = data[1], int(data[2])
        await query.message.reply_text(make_premix(name, vol), parse_mode="Markdown")
        return

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_raw = update.message.text or ""
    q = resolve_alias(q_raw)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if q in ["–∑–∞–≥–æ—Ç–æ–≤–∫–∏", "–∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–∑–∞–≥"]:
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É:", reply_markup=make_list_kb("zagi", 0))
        return
    if q in ["–Ω–∞—Å—Ç–æ–π–∫–∏", "–Ω–∞—Å—Ç–æ–π–∫–∞", "–Ω–∞—Å—Ç"]:
        await update.message.reply_text("üß™ –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç–æ–π–∫—É:", reply_markup=make_list_kb("tinct", 0))
        return
    if q in ["–∫–æ–∫—Ç–µ–π–ª–∏", "–∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–ª–∏"]:
        await update.message.reply_text("üç∏ –í—ã–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å:", reply_markup=make_list_kb("cocktails", 0))
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
    if q in cocktail_names_set:
        text = format_cocktail(q)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{q}|500"),
            InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{q}|700"),
            InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{q}|1000"),
        ]])
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        return
    if q in zagi_names_set:
        await update.message.reply_text(format_zagotovka(q), parse_mode="Markdown")
        return
    if q in tinct_names_set:
        await update.message.reply_text(format_tincture(q), parse_mode="Markdown")
        return

    # –ú—è–≥–∫–∏–π –ø–æ–∏—Å–∫ (–±–µ–∑ the, contains)
    q_nothe = q.replace(" the ", " ").strip()
    candidates = [n for n in cocktail_names if q_nothe in n or n in q_nothe]
    if not candidates:
        candidates = [n for n in zagi_names if q_nothe in n or n in q_nothe]
        if candidates:
            await update.message.reply_text(format_zagotovka(candidates[0]), parse_mode="Markdown")
            return
        candidates = [n for n in tinct_names if q_nothe in n or n in q_nothe]
        if candidates:
            await update.message.reply_text(format_tincture(candidates[0]), parse_mode="Markdown")
            return
    else:
        best = sorted(candidates, key=len)[0]
        text = format_cocktail(best)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì¶ 500 –º–ª",  callback_data=f"premix|{best}|500"),
            InlineKeyboardButton("üì¶ 700 –º–ª",  callback_data=f"premix|{best}|700"),
            InlineKeyboardButton("üì¶ 1000 –º–ª", callback_data=f"premix|{best}|1000"),
        ]])
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
        return

    await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é /start")

# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print(f"‚úÖ –ö–æ–∫—Ç–µ–π–ª–∏:  {len(cocktail_names)}")
    print(f"‚úÖ –ó–∞–≥–æ—Ç–æ–≤–∫–∏: {len(zagi_names)}")
    print(f"‚úÖ –ù–∞—Å—Ç–æ–π–∫–∏:  {len(tinct_names)}")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
