import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from aliases import ALIASES

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "8442487432:AAFmTCgUAt57UcJhSbMool1IsCi8snOIPEs"

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
COCKTAILS_FILE = os.path.join(BASE_DIR, "tech_cards_coctail_rambling.xlsx")
ZAGOTOVKI_FILE = os.path.join(BASE_DIR, "tech_cards_zagi.xlsx")
TINCTURES_FILE = os.path.join(BASE_DIR, "tech_cards_tinctures.xlsx")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_cocktails():
    df = pd.read_excel(COCKTAILS_FILE)
    cocktails = {}
    for name in df["–ù–∞–∑–≤–∞–Ω–∏–µ"].dropna().unique():
        subset = df[df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == name]
        cocktails[name.strip().lower().replace(" ", "_")] = {
            "name": name.strip(),
            "glass": str(subset["–ø–æ—Å—É–¥–∞"].iloc[0]),
            "method": str(subset["–º–µ—Ç–æ–¥"].iloc[0]),
            "garnish": str(subset["–≥–∞—Ä–Ω–∏—à"].iloc[0]),
            "ingredients": [
                {"ingredient": str(row["–°–æ—Å—Ç–∞–≤"]), "amount": str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"])}
                for _, row in subset.iterrows()
                if pd.notna(row["–°–æ—Å—Ç–∞–≤"]) and pd.notna(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"])
            ],
        }
    return cocktails

def load_zagot():
    df = pd.read_excel(ZAGOTOVKI_FILE)
    zagot = {}
    for name in df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].dropna().unique():
        subset = df[df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
        zagot[name.strip().lower().replace(" ", "_")] = {
            "name": name.strip(),
            "ingredients": [
                {"ingredient": str(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"]), "amount": str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"])}
                for _, row in subset.iterrows()
                if pd.notna(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"])
            ],
            "method": str(subset["–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"].iloc[0]) if "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" in subset else "",
            "yield": str(subset["–≤—ã—Ö–æ–¥"].iloc[0]) if "–≤—ã—Ö–æ–¥" in subset else "",
        }
    return zagot

def load_tinctures():
    df = pd.read_excel(TINCTURES_FILE)
    tinctures = {}
    for name in df["–Ω–∞–∑–≤–∞–Ω–∏–µ"].dropna().unique():
        subset = df[df["–Ω–∞–∑–≤–∞–Ω–∏–µ"] == name]
        tinctures[name.strip().lower().replace(" ", "_")] = {
            "name": name.strip(),
            "ingredients": [
                {"ingredient": str(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"]), "amount": str(row["–≥—Ä–∞–º–º–æ–≤–∫–∞"])}
                for _, row in subset.iterrows()
                if pd.notna(row["–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"])
            ],
            "method": str(subset["–º–µ—Ç–æ–¥"].iloc[0]) if "–º–µ—Ç–æ–¥" in subset else "",
        }
    return tinctures

COCKTAILS = load_cocktails()
ZAGOTOVKI = load_zagot()
TINCTURES = load_tinctures()

# === –ê–ª–∏–∞—Å—ã ===
def resolve_alias(query: str):
    q = query.strip().lower()
    return ALIASES.get(q, q.replace(" ", "_"))

# === –ü—Ä–µ–º–∏–∫—Å—ã ===
EXCLUDE_FROM_PREMIX = ["juice", "—Å–æ–∫", "cream", "—Å–ª–∏–≤–∫–∏", "milk", "–º–æ–ª–æ–∫–æ", "sparkling", "—Å–æ–¥–∞", "water", "wine"]

def make_premix(ingredients, bottle_size):
    premix = []
    for item in ingredients:
        ing = item["ingredient"].lower()
        if any(ex in ing for ex in EXCLUDE_FROM_PREMIX):
            continue
        try:
            amount_val = float(item["amount"].split()[0])
            unit = item["amount"].split()[1]
            scaled = (amount_val / 100) * bottle_size
            scaled = int(scaled // 10 * 10)
            premix.append(f"{item['ingredient']}: {scaled} {unit}")
        except:
            continue
    return premix

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è, –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫–∏.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()
    key = resolve_alias(query)

    # –∫–æ–∫—Ç–µ–π–ª–∏
    if key in COCKTAILS:
        c = COCKTAILS[key]
        text = f"üç∏ *{c['name']}*\nü•É {c['glass']}\n‚öôÔ∏è {c['method']}\nüçä {c['garnish']}\n\n"
        for ing in c["ingredients"]:
            text += f"- {ing['ingredient']} ‚Äî {ing['amount']}\n"
        keyboard = [
            [InlineKeyboardButton("500 –º–ª", callback_data=f"premix_{key}_500")],
            [InlineKeyboardButton("700 –º–ª", callback_data=f"premix_{key}_700")],
            [InlineKeyboardButton("1000 –º–ª", callback_data=f"premix_{key}_1000")],
        ]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –∑–∞–≥–æ—Ç–æ–≤–∫–∏
    if key in ZAGOTOVKI:
        z = ZAGOTOVKI[key]
        text = f"üß™ *{z['name']}*\n\n"
        for ing in z["ingredients"]:
            text += f"- {ing['ingredient']} ‚Äî {ing['amount']}\n"
        text += f"\n‚öôÔ∏è {z['method']}\nüì¶ –í—ã—Ö–æ–¥: {z['yield']}"
        await update.message.reply_text(text, parse_mode="Markdown")
        return

    # –Ω–∞—Å—Ç–æ–π–∫–∏
    if key in TINCTURES:
        t = TINCTURES[key]
        text = f"üß™ *{t['name']}*\n\n"
        for ing in t["ingredients"]:
            text += f"- {ing['ingredient']} ‚Äî {ing['amount']}\n"
        text += f"\n‚öôÔ∏è {t['method']}"
        await update.message.reply_text(text, parse_mode="Markdown")
        return

    await update.message.reply_text("‚ùì –ù–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("premix_"):
        _, key, size = data.split("_")
        c = COCKTAILS.get(key)
        if not c:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ–∫—Ç–µ–π–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        premix = make_premix(c["ingredients"], int(size))
        if not premix:
            await query.edit_message_text("‚ö†Ô∏è –í –ø—Ä–µ–º–∏–∫—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç.")
            return
        text = f"ü•§ –ü—Ä–µ–º–∏–∫—Å –¥–ª—è *{c['name']}* ({size} –º–ª):\n\n"
        text += "\n".join(premix)
        await query.edit_message_text(text, parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()
